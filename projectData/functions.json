{"_id":"convexHull","projectName":"default","arguments":"array of points","specification":"Return a set of points representing the convex hull for the set of points provided. \nPoints are in the form of {x,y}","jsdoc":"/**\n * Calculates the convex hull of a set of points using Andrew's monotone chain algorithm.\n * @param {Array} pointsSet - An array of point objects, each containing x and y coordinates as properties. The input must contain at least three distinct points.\n * @returns {Array} A new array representing the vertices of the convex hull in counterclockwise order, starting with the leftmost vertex. If fewer than 3 points are provided or no valid convex hull can be formed, the original set is returned unchanged.\n */","code":"function convexHullPointsSet(pointsSet) {\n    if (pointsSet.length < 3) return pointsSet;\n\n    const sortedPoints = [...pointsSet].sort((a, b) => a.x - b.x || a.y - b.y);\n\n    let hullLower = [];\n    for (let point of sortedPoints) {\n        while (hullLower.length >= 2 && crossProduct(hullLower[hullLower.length - 2], hullLower[hullLower.length - 1], point) <= 0) {\n            hullLower.pop();\n        }\n        hullLower.push(point);\n    }\n\n    let hullUpper = [];\n    for (let point of [...sortedPoints].reverse()) {\n        while (hullUpper.length >= 2 && crossProduct(hullUpper[hullUpper.length - 2], hullUpper[hullUpper.length - 1], point) <= 0) {\n            hullUpper.pop();\n        }\n        hullUpper.push(point);\n    }\n\n    return [...hullLower, ...hullUpper.slice(1).reverse()];\n}","errorLogs":""}
{"_id":"fsdfsdfs","projectName":"default","arguments":"a\nb\nc","specification":"return an array containing all possible combinations of the input arguments ","jsdoc":"/**\n* Generates all permutations of three elements.\n* @param {*} a - The first element in the array to be permuted.\n* @param {*} b - The second element in the array to be permuted.\n* @param {*} c - The third element in the array to be permuted.\n* @return {Array<Array>} An array containing all permutations of [a, b, c].\n*/","code":"function fsdfsdfs(a, b, c) {\n    return [\n        [a, b, c],\n        [a, c, b],\n        [b, a, c],\n        [b, c, a],\n        [c, a, b],\n        [c, b, a]\n    ];\n}","errorLogs":true}
{"_id":"sumAB","projectName":"default","arguments":"a\nb","specification":"add a and B together and return result","jsdoc":"/**\n * Calculates the sum of two numbers, `a` and `b`.\n * @param {number} a - The first number to be added. Must be finite.\n * @param {number} b - The second number to be added. Must be finite.\n * @returns {number} The sum of `a` and `b`.\n * @throws An error if either argument is not a finite number.\n */","code":"function sumAB(a, b) {\n  if (!Number.isFinite(a) || !Number.isFinite(b)) throw new Error('Both arguments must be numbers');\n  return a + b;\n}","errorLogs":"","errorLog":"wooooooooooooooooooooooooooot. we testing now"}
{"_id":"test","projectName":"bla","arguments":"a\nb","specification":"add a and b together and return the result","jsdoc":"/**\n * Adds two numbers together.\n * @param {number} a - The first number to add.\n * @param {number} b - The second number to add.\n * @returns {number} The sum of the input parameters.\n */","code":"function test(a, b) {\n    return a + b;\n}","errorLogs":"true"}
